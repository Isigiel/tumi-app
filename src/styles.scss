@use '~@angular/material' as mat;
@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";
@import "mixins";
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core(
  mat.define-typography-config($font-family: 'theme("fontFamily.sans")')
);

$tail-primary: (
  100: theme("colors.primary.100"),
  500: theme("colors.primary.500"),
  700: theme("colors.primary.700"),
  contrast: (
    100: rgba(black, 0.87),
    500: white,
    700: white,
  ),
);

$tail-accent: (
  100: theme("colors.accent.100"),
  500: theme("colors.accent.500"),
  700: theme("colors.accent.700"),
  contrast: (
    100: rgba(black, 0.87),
    500: white,
    700: white,
  ),
);

$tail-warn: (
  100: theme("colors.warn.100"),
  500: theme("colors.warn.500"),
  700: theme("colors.warn.700"),
  contrast: (
    100: rgba(black, 0.87),
    500: white,
    700: white,
  ),
);

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$tumi-app-primary: mat.define-palette($tail-primary);
$tumi-app-accent: mat.define-palette($tail-accent);

// The warn palette is optional (defaults to red).
$tumi-app-warn: mat.define-palette($tail-warn);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$tumi-app-theme: mat.define-light-theme(
  (
    color: (
      primary: $tumi-app-primary,
      accent: $tumi-app-accent,
      warn: $tumi-app-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($tumi-app-theme);

/* You can add global styles to this file, and also import other style files */
html,
body,
app-root,
app-navigation {
  min-height: 100vh;
  display: block;
}

body {
  background-size: cover;
  background: url("/assets/images/background.jpg") no-repeat fixed center;
}

.panel {
  @include panel();
}

table.mat-table {
  background: rgba(255, 255, 255, 0.3);
  border-radius: 8px;
  border: solid 1px rgba(255, 255, 255, 0.7);
  overflow: hidden;
  thead,
  tbody {
    background: transparent;
  }
}

mat-checkbox.mat-checkbox {
  label.mat-checkbox-layout {
    white-space: normal;
  }
}

.mat-drawer-backdrop.mat-drawer-shown {
  background: transparent;
  backdrop-filter: blur(20px);
}

mat-nav-list.mat-nav-list {
  .mat-list-item.active {
    background: mat.get-color-from-palette($tumi-app-primary, darker, 0.4);
    color: white;

    &:focus,
    &:hover {
      background: mat.get-color-from-palette($tumi-app-primary, darker, 0.6);
    }

    mat-icon {
      color: mat.get-color-from-palette($tumi-app-primary, lighter);
    }
  }
}

button:not(.mat-icon-button),
a:not(.mat-icon-button) {
  .mat-button-wrapper {
    mat-icon.mat-icon {
      width: 24px !important;
      height: 24px !important;
      font-size: 24px !important;
      line-height: 24px !important;
      margin-right: 8px;
      margin-left: -8px;
    }
  }
}

mat-icon.mat-icon {
  width: 24px !important;
  height: 24px !important;
  font-size: 24px !important;
  line-height: 24px !important;

  &[matDatepickerToggleIcon] {
    width: 24px !important;
    height: 24px !important;
    font-size: 24px !important;
    line-height: 24px !important;
  }

  &.large {
    width: 4rem !important;
    height: 4rem !important;
    font-size: 4rem !important;
    line-height: 4rem !important;
  }
}

.break-words {
  overflow-wrap: break-word;
  word-wrap: break-word;
  word-break: break-word;
  hyphens: auto;
}

markdown {
  a {
    word-break: break-all;
  }
}

a.styled {
  text-decoration: underline dashed;
  color: inherit;

  &:hover {
    text-decoration: underline;
  }

  &:visited {
    text-decoration: underline double;
  }
}
